/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const SnsIndexLazyImport = createFileRoute('/sns/')()
const RoomIndexLazyImport = createFileRoute('/room/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const PortfolioIndexLazyImport = createFileRoute('/portfolio/')()
const MusicIndexLazyImport = createFileRoute('/music/')()
const DeveloperIndexLazyImport = createFileRoute('/developer/')()
const BlogIndexLazyImport = createFileRoute('/blog/')()
const BlogSlugIndexLazyImport = createFileRoute('/blog/$slug/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SnsIndexLazyRoute = SnsIndexLazyImport.update({
  id: '/sns/',
  path: '/sns/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sns/index.lazy').then((d) => d.Route))

const RoomIndexLazyRoute = RoomIndexLazyImport.update({
  id: '/room/',
  path: '/room/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/room/index.lazy').then((d) => d.Route))

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const PortfolioIndexLazyRoute = PortfolioIndexLazyImport.update({
  id: '/portfolio/',
  path: '/portfolio/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/portfolio/index.lazy').then((d) => d.Route),
)

const MusicIndexLazyRoute = MusicIndexLazyImport.update({
  id: '/music/',
  path: '/music/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/music/index.lazy').then((d) => d.Route))

const DeveloperIndexLazyRoute = DeveloperIndexLazyImport.update({
  id: '/developer/',
  path: '/developer/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/developer/index.lazy').then((d) => d.Route),
)

const BlogIndexLazyRoute = BlogIndexLazyImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/blog/index.lazy').then((d) => d.Route))

const BlogSlugIndexLazyRoute = BlogSlugIndexLazyImport.update({
  id: '/blog/$slug/',
  path: '/blog/$slug/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/blog/$slug/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/developer/': {
      id: '/developer/'
      path: '/developer'
      fullPath: '/developer'
      preLoaderRoute: typeof DeveloperIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/music/': {
      id: '/music/'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof MusicIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/portfolio/': {
      id: '/portfolio/'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/room/': {
      id: '/room/'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/sns/': {
      id: '/sns/'
      path: '/sns'
      fullPath: '/sns'
      preLoaderRoute: typeof SnsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blog/$slug/': {
      id: '/blog/$slug/'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/blog': typeof BlogIndexLazyRoute
  '/developer': typeof DeveloperIndexLazyRoute
  '/music': typeof MusicIndexLazyRoute
  '/portfolio': typeof PortfolioIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/room': typeof RoomIndexLazyRoute
  '/sns': typeof SnsIndexLazyRoute
  '/blog/$slug': typeof BlogSlugIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/blog': typeof BlogIndexLazyRoute
  '/developer': typeof DeveloperIndexLazyRoute
  '/music': typeof MusicIndexLazyRoute
  '/portfolio': typeof PortfolioIndexLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/room': typeof RoomIndexLazyRoute
  '/sns': typeof SnsIndexLazyRoute
  '/blog/$slug': typeof BlogSlugIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/blog/': typeof BlogIndexLazyRoute
  '/developer/': typeof DeveloperIndexLazyRoute
  '/music/': typeof MusicIndexLazyRoute
  '/portfolio/': typeof PortfolioIndexLazyRoute
  '/profile/': typeof ProfileIndexLazyRoute
  '/room/': typeof RoomIndexLazyRoute
  '/sns/': typeof SnsIndexLazyRoute
  '/blog/$slug/': typeof BlogSlugIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/developer'
    | '/music'
    | '/portfolio'
    | '/profile'
    | '/room'
    | '/sns'
    | '/blog/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/developer'
    | '/music'
    | '/portfolio'
    | '/profile'
    | '/room'
    | '/sns'
    | '/blog/$slug'
  id:
    | '__root__'
    | '/'
    | '/blog/'
    | '/developer/'
    | '/music/'
    | '/portfolio/'
    | '/profile/'
    | '/room/'
    | '/sns/'
    | '/blog/$slug/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BlogIndexLazyRoute: typeof BlogIndexLazyRoute
  DeveloperIndexLazyRoute: typeof DeveloperIndexLazyRoute
  MusicIndexLazyRoute: typeof MusicIndexLazyRoute
  PortfolioIndexLazyRoute: typeof PortfolioIndexLazyRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
  RoomIndexLazyRoute: typeof RoomIndexLazyRoute
  SnsIndexLazyRoute: typeof SnsIndexLazyRoute
  BlogSlugIndexLazyRoute: typeof BlogSlugIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BlogIndexLazyRoute: BlogIndexLazyRoute,
  DeveloperIndexLazyRoute: DeveloperIndexLazyRoute,
  MusicIndexLazyRoute: MusicIndexLazyRoute,
  PortfolioIndexLazyRoute: PortfolioIndexLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
  RoomIndexLazyRoute: RoomIndexLazyRoute,
  SnsIndexLazyRoute: SnsIndexLazyRoute,
  BlogSlugIndexLazyRoute: BlogSlugIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog/",
        "/developer/",
        "/music/",
        "/portfolio/",
        "/profile/",
        "/room/",
        "/sns/",
        "/blog/$slug/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/blog/": {
      "filePath": "blog/index.lazy.tsx"
    },
    "/developer/": {
      "filePath": "developer/index.lazy.tsx"
    },
    "/music/": {
      "filePath": "music/index.lazy.tsx"
    },
    "/portfolio/": {
      "filePath": "portfolio/index.lazy.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    },
    "/room/": {
      "filePath": "room/index.lazy.tsx"
    },
    "/sns/": {
      "filePath": "sns/index.lazy.tsx"
    },
    "/blog/$slug/": {
      "filePath": "blog/$slug/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
